{
  "compilerOptions": {    
    /* Language and Environment */
    "target": "ES2016",                                    /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */   
    
    /* Modules */
    "module": "esnext",                                  /* Specify what module code is generated. */
    "moduleResolution": "node",
    "resolveJsonModule": true,

    /* Emit */
    "outDir": "build",                                     /* Specify an output folder for all emitted files. */
    
    /* Interop Constraints */    
    "esModuleInterop": true,                               /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "forceConsistentCasingInFileNames": true,              /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                        /* Enable all strict type-checking options. */
    "noImplicitAny": true,                                 /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "strictNullChecks": true,                              /* When type checking, take into account 'null' and 'undefined'. */
    "strictFunctionTypes": true,                           /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    "strictBindCallApply": true,                           /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    "strictPropertyInitialization": true,                  /* Check for class properties that are declared but not set in the constructor. */
    "noImplicitThis": true,                                /* Enable error reporting when 'this' is given the type 'any'. */
    "useUnknownInCatchVariables": true,                    /* Default catch clause variables as 'unknown' instead of 'any'. */
    "alwaysStrict": true,                                  /* Ensure 'use strict' is always emitted. */
    "noUnusedLocals": true,                                /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true,                            /* Raise an error when a function parameter isn't read. */
    "noFallthroughCasesInSwitch": true,                    /* Enable error reporting for fallthrough cases in switch statements. */
    "noUncheckedIndexedAccess": true,                      /* Add 'undefined' to a type when accessed using an index. */
    "noImplicitOverride": true,                            /* Ensure overriding members in derived classes are marked with an override modifier. */
    "noPropertyAccessFromIndexSignature": true,            /* Enforces using indexed accessors for keys declared using an indexed type. */
    "checkJs": true,                                       /* Enable error reporting in type-checked JavaScript files. */
    "typeRoots" : ["node_modules/@types", "./typings"],    /* Specify multiple folders that act like ./node_modules/@types */

    /* Completeness */
    "skipLibCheck": false,                                 /* Skip type checking all .d.ts files. */
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"],  

  // these options are overrides used only by ts-node
  "ts-node": {
    // same as the --compilerOptions flag and the TS_NODE_COMPILER_OPTIONS environment variable
    "compilerOptions": {
      "module": "commonjs"
    }
  },
}
